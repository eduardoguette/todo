import { Count, Filter, PostgrestError, Returning } from '../../types';
export declare type UseUpsertState<Data = any> = {
    count?: number | null;
    data?: Data | Data[] | null;
    error?: PostgrestError | null;
    fetching: boolean;
};
export declare type UseUpsertResponse<Data = any> = [
    UseUpsertState<Data>,
    (values: Partial<Data> | Partial<Data>[], options?: UseUpsertOptions, filter?: Filter<Data>) => Promise<Pick<UseUpsertState<Data>, 'count' | 'data' | 'error'>>
];
export declare type UseUpsertOptions = {
    count?: null | Count;
    onConflict?: string;
    returning?: Returning;
};
export declare type UseUpsertConfig<Data = any> = {
    filter?: Filter<Data>;
    options?: UseUpsertOptions;
};
export declare function useUpsert<Data = any>(table: string, config?: UseUpsertConfig<Data>): UseUpsertResponse<Data>;
