import { Count, Filter, PostgrestError, Returning } from '../../types';
export declare type UseUpdateState<Data = any> = {
    count?: number | null;
    data?: Data | Data[] | null;
    error?: PostgrestError | null;
    fetching: boolean;
};
export declare type UseUpdateResponse<Data = any> = [
    UseUpdateState<Data>,
    (values: Partial<Data>, filter?: Filter<Data>, options?: UseUpdateOptions) => Promise<Pick<UseUpdateState<Data>, 'count' | 'data' | 'error'>>
];
export declare type UseUpdateOptions = {
    count?: null | Count;
    returning?: Returning;
};
export declare type UseUpdateConfig<Data = any> = {
    filter?: Filter<Data>;
    options?: UseUpdateOptions;
};
export declare function useUpdate<Data = any>(table: string, config?: UseUpdateConfig<Data>): UseUpdateResponse<Data>;
