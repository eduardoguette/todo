{"ast":null,"code":"import { supabase } from \"./supabaseClient\";\nexport const signUp = async dataUSer => {\n  const {\n    user,\n    session,\n    error\n  } = await supabase.auth.signUp(dataUSer);\n  return [user, session, error];\n};\nexport const logIn = async dataUSer => {\n  const {\n    user,\n    session,\n    error\n  } = await supabase.auth.signIn(dataUSer);\n  return [user, session, error];\n};\nexport const singOut = async () => {\n  const {\n    error\n  } = await supabase.auth.signOut();\n  return [error];\n};\nexport const deleteUser = async (a, b) => {\n  const {\n    user,\n    error\n  } = await supabase.auth.api.deleteUser(a, b);\n  return [user, error];\n};\nexport const getTodos = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"todos\").select();\n  return [data, error];\n};\nexport const createTodo = async newTodo => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"todos\").insert(newTodo);\n  return [data, error];\n};\nexport const updateTodo = async (change, id) => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"todos\").update(change).match(id);\n  return [data, error];\n};\nexport const deleteTodo = async id => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"todos\").delete().match(id);\n  return [data, error];\n};\nexport const recoveryPassword = async email => {\n  const {\n    data,\n    error\n  } = supabase.auth.api.resetPasswordForEmail(email);\n  return [data, error];\n};","map":{"version":3,"sources":["/Users/eduardoguette/Documents/Projects/todo/src/services/index.js"],"names":["supabase","signUp","dataUSer","user","session","error","auth","logIn","signIn","singOut","signOut","deleteUser","a","b","api","getTodos","data","from","select","createTodo","newTodo","insert","updateTodo","change","id","update","match","deleteTodo","delete","recoveryPassword","email","resetPasswordForEmail"],"mappings":"AAAA,SAASA,QAAT,QAAyB,kBAAzB;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAOC,QAAP,IAAoB;AACxC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2B,MAAML,QAAQ,CAACM,IAAT,CAAcL,MAAd,CAAqBC,QAArB,CAAvC;AACA,SAAO,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,CAAP;AACD,CAHM;AAKP,OAAO,MAAME,KAAK,GAAG,MAAOL,QAAP,IAAoB;AACvC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2B,MAAML,QAAQ,CAACM,IAAT,CAAcE,MAAd,CAAqBN,QAArB,CAAvC;AACA,SAAO,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,CAAP;AACD,CAHM;AAKP,OAAO,MAAMI,OAAO,GAAG,YAAY;AACjC,QAAM;AAAEJ,IAAAA;AAAF,MAAY,MAAML,QAAQ,CAACM,IAAT,CAAcI,OAAd,EAAxB;AACA,SAAO,CAACL,KAAD,CAAP;AACD,CAHM;AAIP,OAAO,MAAMM,UAAU,GAAG,OAAOC,CAAP,EAAUC,CAAV,KAAgB;AACxC,QAAM;AAAEV,IAAAA,IAAF;AAAQE,IAAAA;AAAR,MAAkB,MAAML,QAAQ,CAACM,IAAT,CAAcQ,GAAd,CAAkBH,UAAlB,CAA6BC,CAA7B,EAAgCC,CAAhC,CAA9B;AACA,SAAO,CAACV,IAAD,EAAOE,KAAP,CAAP;AACD,CAHM;AAIP,OAAO,MAAMU,QAAQ,GAAG,YAAY;AAClC,QAAM;AAAEC,IAAAA,IAAF;AAAQX,IAAAA;AAAR,MAAkB,MAAML,QAAQ,CAACiB,IAAT,CAAc,OAAd,EAAuBC,MAAvB,EAA9B;AACA,SAAO,CAACF,IAAD,EAAOX,KAAP,CAAP;AACD,CAHM;AAIP,OAAO,MAAMc,UAAU,GAAG,MAAOC,OAAP,IAAmB;AAC3C,QAAM;AAAEJ,IAAAA,IAAF;AAAQX,IAAAA;AAAR,MAAkB,MAAML,QAAQ,CAACiB,IAAT,CAAc,OAAd,EAAuBI,MAAvB,CAA8BD,OAA9B,CAA9B;AACA,SAAO,CAACJ,IAAD,EAAOX,KAAP,CAAP;AACD,CAHM;AAIP,OAAO,MAAMiB,UAAU,GAAG,OAAOC,MAAP,EAAeC,EAAf,KAAsB;AAC9C,QAAM;AAAER,IAAAA,IAAF;AAAQX,IAAAA;AAAR,MAAkB,MAAML,QAAQ,CAACiB,IAAT,CAAc,OAAd,EAAuBQ,MAAvB,CAA8BF,MAA9B,EAAsCG,KAAtC,CAA4CF,EAA5C,CAA9B;AACA,SAAO,CAACR,IAAD,EAAOX,KAAP,CAAP;AACD,CAHM;AAIP,OAAO,MAAMsB,UAAU,GAAG,MAAOH,EAAP,IAAc;AACtC,QAAM;AAAER,IAAAA,IAAF;AAAQX,IAAAA;AAAR,MAAkB,MAAML,QAAQ,CAACiB,IAAT,CAAc,OAAd,EAAuBW,MAAvB,GAAgCF,KAAhC,CAAsCF,EAAtC,CAA9B;AACA,SAAO,CAACR,IAAD,EAAOX,KAAP,CAAP;AACD,CAHM;AAIP,OAAO,MAAMwB,gBAAgB,GAAG,MAAOC,KAAP,IAAiB;AAC/C,QAAM;AAAEd,IAAAA,IAAF;AAAQX,IAAAA;AAAR,MAAkBL,QAAQ,CAACM,IAAT,CAAcQ,GAAd,CAAkBiB,qBAAlB,CAAwCD,KAAxC,CAAxB;AACA,SAAO,CAACd,IAAD,EAAOX,KAAP,CAAP;AACD,CAHM","sourcesContent":["import { supabase } from \"./supabaseClient\";\r\n\r\nexport const signUp = async (dataUSer) => {\r\n  const { user, session, error } = await supabase.auth.signUp(dataUSer);\r\n  return [user, session, error];\r\n};\r\n\r\nexport const logIn = async (dataUSer) => {\r\n  const { user, session, error } = await supabase.auth.signIn(dataUSer);\r\n  return [user, session, error];\r\n};\r\n\r\nexport const singOut = async () => {\r\n  const { error } = await supabase.auth.signOut();\r\n  return [error];\r\n};\r\nexport const deleteUser = async (a, b) => {\r\n  const { user, error } = await supabase.auth.api.deleteUser(a, b);\r\n  return [user, error];\r\n};\r\nexport const getTodos = async () => {\r\n  const { data, error } = await supabase.from(\"todos\").select();\r\n  return [data, error];\r\n};\r\nexport const createTodo = async (newTodo) => {\r\n  const { data, error } = await supabase.from(\"todos\").insert(newTodo);\r\n  return [data, error];\r\n};\r\nexport const updateTodo = async (change, id) => {\r\n  const { data, error } = await supabase.from(\"todos\").update(change).match(id);\r\n  return [data, error];\r\n};\r\nexport const deleteTodo = async (id) => {\r\n  const { data, error } = await supabase.from(\"todos\").delete().match(id);\r\n  return [data, error];\r\n};\r\nexport const recoveryPassword = async (email) => {\r\n  const { data, error } = supabase.auth.api.resetPasswordForEmail(email);\r\n  return [data, error];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}