import { SupabaseRealtimePayload } from '@supabase/supabase-js';
import { UseSelectConfig, UseSelectState } from '../data';
export declare type UseRealtimeState<Data = any> = Omit<UseSelectState<Data>, 'count'> & {
    old?: Data[] | null;
};
export declare type UseRealtimeResponse<Data = any> = [
    UseRealtimeState<Data>,
    () => Promise<Pick<UseSelectState<Data>, 'count' | 'data' | 'error'> | null>
];
export declare type UseRealtimeAction<Data = any> = {
    type: 'FETCH';
    payload: UseSelectState<Data>;
} | {
    type: 'SUBSCRIPTION';
    payload: SupabaseRealtimePayload<Data>;
};
export declare type UseRealtimeConfig<Data = any> = {
    select?: Omit<UseSelectConfig<Data>, 'pause'>;
};
export declare type UseRealtimeCompareFn<Data = any> = (data: Data, payload: Data) => boolean;
export declare function useRealtime<Data = any>(table: string, config?: UseRealtimeConfig<Data>, compareFn?: UseRealtimeCompareFn<Data>): UseRealtimeResponse<Data>;
